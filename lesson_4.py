# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной
# платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во
# время выполнения расчёта для конкретных значений необходимо запускать скрипт с
# параметрами.


from sys import argv

script_name, vh, mh, p = argv

def my_func(vh, mh, p):
    return (((int(vh)) * (int(mh))) + (int(p)))

print(f"Имя скрипта: {script_name}")
print(f"Выработка в часах: {vh}")
print(f"Ставка в час: {mh}")
print(f"Премия: {p}")
print(f"Заработная плата сотрудника составила: {my_func(vh, mh, p)} д. ед.")


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения
# которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его
# формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].


result_list = []

list = [int(i) for i in input("Введите список чисел: ").split()]
for i in range(1, len(list)):
    if list[i] > list[i-1]:
        (result_list.append(list[i]))

print(f"Исходный список: {list} ")
print(f"Список, элементы которого больше предыдущего: {result_list}")


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну
# строку.
# Подсказка: используйте функцию range() и генератор.


list = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(f"Список кратных 20 или 21 чисел в пределах от 20 до 240: {list}")


# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в
# порядке их следования в исходном списке. Для выполнения задания обязательно используйте
# генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]


list = [int(i) for i in input("Введите список чисел: ").split()]

result_list = [i for i in list if list.count(i) == 1]

print(f"Исходный список: {list} ")
print(f"Элементы в списке, которые не имеют повторений: {result_list}")


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В
# список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить
# результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().


from functools import reduce

list = [i for i in range(100, 1001, 2)]
print(f"Список чётных чисел в диапазоне [100..1000]:\n {list}")
print(f"Произведение всех элементов списка:\n {reduce(lambda x,y: x*y, list)}")


# 6. Реализовать два небольших скрипта:
# ● итератор, генерирующий целые числа, начиная с указанного;
# ● итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что
# создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 —
# завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором
# повторение элементов списка прекратится.


from itertools import count, cycle

for i in count(3):
    if i == 10:
        break
    print(i)

user_cycle = cycle(['one', 'two', True, None, {'dict': False}])
for i in range(20):
    print(next(user_cycle))


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное
# значение. При вызове функции должен создаваться объект-генератор. Функция вызывается
# следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле
# нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал
# четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(num):
    for num in range(1, n + 1):
        yield num


try:
    n = int(input('Факториал от: '))
except ValueError as e:
    print(f'Необходимо ввести неотрицательное целое число!\nОшибка: {e}')
else:
    if n >= 0:
        result = 1
        for el in fact(n):
            result *= el
        print(f'!{n} = {result}')
    else:
        print('Факториал от отрицательного числа невозможен!')